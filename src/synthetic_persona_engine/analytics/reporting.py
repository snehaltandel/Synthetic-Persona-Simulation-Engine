"""Analytics and reporting helpers."""
from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path

import pandas as pd
from pptx import Presentation

from ..simulation.experiments import ExperimentResult


@dataclass
class PersonaSummary:
    cluster_id: int
    size: int
    top_events: dict
    avg_session_duration: float


def build_persona_summary(segmented_events: pd.DataFrame) -> pd.DataFrame:
    """Create a persona summary table from clustered events."""

    summaries = []
    for cluster_id, group in segmented_events.groupby("cluster"):
        summary = PersonaSummary(
            cluster_id=int(cluster_id),
            size=int(group["user_id"].nunique()),
            top_events=group["event_type"].value_counts().head(5).to_dict(),
            avg_session_duration=float(group.get("session_duration_seconds", pd.Series()).mean() or 0.0),
        )
        summaries.append(summary)
    return pd.DataFrame([s.__dict__ for s in summaries])


def experiment_summary(experiment: ExperimentResult) -> pd.DataFrame:
    """Summarise experiment metrics in a dataframe."""

    rows = []
    for variant, metrics in [
        ("Control", experiment.control),
        ("Treatment", experiment.treatment),
        ("Uplift", experiment.uplift),
    ]:
        for metric, value in metrics.items():
            rows.append({"Variant": variant, "Metric": metric, "Value": value})
    return pd.DataFrame(rows)


def export_powerpoint(
    *,
    persona_summary: pd.DataFrame,
    experiment_metrics: pd.DataFrame,
    output_path: Path | str,
    title: str = "Synthetic Persona Simulation Results",
) -> None:
    """Generate a PowerPoint report for executive audiences."""

    prs = Presentation()

    # Title slide
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = title
    slide.placeholders[1].text = "Automated report generated by Synthetic Persona Simulation Engine"

    # Persona summary slide
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    slide.shapes.title.text = "Persona Archetypes"
    body = slide.shapes.placeholders[1].text_frame
    body.clear()
    for _, row in persona_summary.iterrows():
        p = body.add_paragraph()
        top_events = ", ".join(f"{k}:{v}" for k, v in row["top_events"].items())
        p.text = (
            f"Cluster {row['cluster_id']} â€” Users: {row['size']}, "
            f"Avg Session Duration: {row['avg_session_duration']:.1f}s, "
            f"Top Events: {top_events}"
        )
        p.level = 0

    # Experiment results slide
    slide = prs.slides.add_slide(prs.slide_layouts[5])
    slide.shapes.title.text = "Simulation Outcomes"
    body = slide.shapes.placeholders[1].text_frame
    body.clear()
    for _, row in experiment_metrics.iterrows():
        p = body.add_paragraph()
        p.text = f"{row['Variant']} - {row['Metric']}: {row['Value']:.3f}"
        p.level = 0

    prs.save(Path(output_path))
